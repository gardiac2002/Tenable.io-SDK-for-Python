<?xml version="1.0" encoding="utf-8"?><testsuite errors="1" failures="7" name="pytest" skips="0" tests="9" time="8.134"><testcase classname="tests.integration.test_client.TestTenableIOClient" file="tests/integration/test_client.py" line="7" name="test_client_bad_keys" time="2.01379680634"><system-out>
TestTenableIOClient:test_client_bad_keys is running.

TestTenableIOClient:test_client_bad_keys took (2.01370191574 seconds).
</system-out><system-err>ERROR:tenable_io:{&quot;url&quot;: &quot;/session&quot;, &quot;status_code&quot;: 401, &quot;reason&quot;: &quot;Unauthorized&quot;, &quot;method&quot;: &quot;GET&quot;, &quot;response_headers&quot;: {&quot;X-Request-Uuid&quot;: &quot;a86afa95b2f604bef4391738d628bbce&quot;, &quot;X-Gateway-Site-ID&quot;: &quot;nginx-router-b-prod-eu-central-1&quot;}}
</system-err></testcase><testcase classname="tests.integration.test_examples.TestExamples" file="tests/integration/test_examples.py" line="6" name="test_files" time="0.752905130386"><failure message="TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}">self = &lt;tests.integration.test_examples.TestExamples object at 0x109e9a190&gt;, app = &lt;tests.conftest.App instance at 0x109d195f0&gt;

    def test_files(self, app):
        from examples.files import example
&gt;       example(app.session_file_output)

tests/integration/test_examples.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
examples/files.py:19: in example
    uploaded_file_name = client.file_helper.upload(upload_file)
tenable_io/helpers/file.py:21: in upload
    uploaded_file_name = self._client.file_api.upload(upload_file)
tenable_io/api/file.py:17: in upload
    response = self._client.post(&apos;file/upload&apos;, files={&apos;Filedata&apos;: (os.path.basename(file.name), file)})
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;tenable_io.client.TenableIOClient object at 0x109e9a490&gt;, &apos;file/upload&apos;)
kwargs = {&apos;files&apos;: {&apos;Filedata&apos;: (&apos;example_upload&apos;, &lt;closed file u&apos;./._tests__1c63778f/example_upload&apos;, mode &apos;rb&apos; at 0x109e565d0&gt;)}}, response = &lt;Response [401]&gt;

    def wrapper(*args, **kwargs):
        response = f(*args, **kwargs)
        if not 200 &lt;= response.status_code &lt;= 299:
&gt;           raise TenableIOApiException(response)
E           TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}

tenable_io/client.py:140: TenableIOApiException</failure><system-out>
TestExamples:test_files is running.

TestExamples:test_files took (0.829343080521 seconds).
</system-out><system-err>ERROR:tenable_io:{&quot;url&quot;: &quot;/file/upload&quot;, &quot;status_code&quot;: 401, &quot;reason&quot;: &quot;Unauthorized&quot;, &quot;method&quot;: &quot;POST&quot;, &quot;response_headers&quot;: {&quot;X-Request-Uuid&quot;: &quot;3d6e57d05ac55767242212e06270a4c2&quot;, &quot;X-Gateway-Site-ID&quot;: &quot;nginx-router-b-prod-eu-central-1&quot;}}
</system-err></testcase><testcase classname="tests.integration.test_examples.TestExamples" file="tests/integration/test_examples.py" line="10" name="test_folders" time="0.711170911789"><failure message="TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}">self = &lt;tests.integration.test_examples.TestExamples object at 0x109ec6b50&gt;, app = &lt;tests.conftest.App instance at 0x109d195f0&gt;

    def test_folders(self, app):
        from examples.folders import example
&gt;       example(app.session_name)

tests/integration/test_examples.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
examples/folders.py:21: in example
    name=folder_name
tenable_io/helpers/folder.py:46: in create
    return FolderRef(self._client, self._client.folders_api.create(name))
tenable_io/api/folders.py:16: in create
    response = self._client.post(&apos;folders&apos;, {&apos;name&apos;: name})
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;tenable_io.client.TenableIOClient object at 0x109ec6c90&gt;, &apos;folders&apos;, {&apos;name&apos;: &apos;my test folder_1c637&apos;}), kwargs = {}, response = &lt;Response [401]&gt;

    def wrapper(*args, **kwargs):
        response = f(*args, **kwargs)
        if not 200 &lt;= response.status_code &lt;= 299:
&gt;           raise TenableIOApiException(response)
E           TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}

tenable_io/client.py:140: TenableIOApiException</failure><system-out>
TestExamples:test_folders is running.

TestExamples:test_folders took (0.730736017227 seconds).
</system-out><system-err>ERROR:tenable_io:{&quot;url&quot;: &quot;/folders&quot;, &quot;status_code&quot;: 401, &quot;reason&quot;: &quot;Unauthorized&quot;, &quot;method&quot;: &quot;POST&quot;, &quot;response_headers&quot;: {&quot;X-Request-Uuid&quot;: &quot;c8353490998ad4b2fff4ae9f16f45ada&quot;, &quot;X-Gateway-Site-ID&quot;: &quot;nginx-router-b-prod-eu-central-1&quot;}}
</system-err></testcase><testcase classname="tests.integration.test_examples.TestExamples" file="tests/integration/test_examples.py" line="14" name="test_policies" time="0.700722932816"><failure message="TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}">self = &lt;tests.integration.test_examples.TestExamples object at 0x109f2f690&gt;, app = &lt;tests.conftest.App instance at 0x109d195f0&gt;

    def test_policies(self, app):
        from examples.policies import example
&gt;       example(app.session_name, app.session_file_output)

tests/integration/test_examples.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
examples/policies.py:23: in example
    template=&apos;discovery&apos;
tenable_io/helpers/policy.py:21: in create
    t = self.template(name=template)
tenable_io/helpers/policy.py:61: in template
    template_list = self._client.editor_api.list(&apos;policy&apos;)
tenable_io/api/editor.py:14: in list
    response = self._client.get(&apos;editor/%(type)s/templates&apos;, path_params={&apos;type&apos;: type})
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;tenable_io.client.TenableIOClient object at 0x109f2f590&gt;, &apos;editor/%(type)s/templates&apos;), kwargs = {&apos;path_params&apos;: {&apos;type&apos;: &apos;policy&apos;}}
response = &lt;Response [401]&gt;

    def wrapper(*args, **kwargs):
        response = f(*args, **kwargs)
        if not 200 &lt;= response.status_code &lt;= 299:
&gt;           raise TenableIOApiException(response)
E           TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}

tenable_io/client.py:140: TenableIOApiException</failure><system-out>
TestExamples:test_policies is running.

TestExamples:test_policies took (0.717746019363 seconds).
</system-out><system-err>ERROR:tenable_io:{&quot;url&quot;: &quot;/editor/policy/templates&quot;, &quot;status_code&quot;: 401, &quot;reason&quot;: &quot;Unauthorized&quot;, &quot;method&quot;: &quot;GET&quot;, &quot;response_headers&quot;: {&quot;X-Request-Uuid&quot;: &quot;9fa4e7ef3cd20d4268c704f59dde88a8&quot;, &quot;X-Gateway-Site-ID&quot;: &quot;nginx-router-b-prod-eu-central-1&quot;}}
</system-err></testcase><testcase classname="tests.integration.test_examples.TestExamples" file="tests/integration/test_examples.py" line="18" name="test_scans" time="0.00145435333252"><failure message="NoOptionError: No option &apos;scan_text_targets&apos; in section: &apos;tenable_io-test&apos;">self = &lt;tests.integration.test_examples.TestExamples object at 0x109f0e710&gt;, app = &lt;tests.conftest.App instance at 0x109d195f0&gt;

    def test_scans(self, app):
        from examples.scans import example
&gt;       example(app.session_name, app.session_file_output, TenableIOTestConfig.get(&apos;scan_text_targets&apos;))

tests/integration/test_examples.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/config.py:25: in get
    return config.get(&apos;tenable_io-test&apos;, key)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;ConfigParser.SafeConfigParser instance at 0x1092723b0&gt;, section = &apos;tenable_io-test&apos;, option = &apos;scan_text_targets&apos;, raw = False, vars = None

    def get(self, section, option, raw=False, vars=None):
        &quot;&quot;&quot;Get an option value for a given section.
    
            If `vars&apos; is provided, it must be a dictionary. The option is looked up
            in `vars&apos; (if provided), `section&apos;, and in `defaults&apos; in that order.
    
            All % interpolations are expanded in the return values, unless the
            optional argument `raw&apos; is true. Values for interpolation keys are
            looked up in the same manner as the option.
    
            The section DEFAULT is special.
            &quot;&quot;&quot;
        sectiondict = {}
        try:
            sectiondict = self._sections[section]
        except KeyError:
            if section != DEFAULTSECT:
                raise NoSectionError(section)
        # Update with the entry specific variables
        vardict = {}
        if vars:
            for key, value in vars.items():
                vardict[self.optionxform(key)] = value
        d = _Chainmap(vardict, sectiondict, self._defaults)
        option = self.optionxform(option)
        try:
            value = d[option]
        except KeyError:
&gt;           raise NoOptionError(option, section)
E           NoOptionError: No option &apos;scan_text_targets&apos; in section: &apos;tenable_io-test&apos;

/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py:618: NoOptionError</failure><system-out>
TestExamples:test_scans is running.

TestExamples:test_scans took (0.0238811969757 seconds).
</system-out></testcase><testcase classname="tests.integration.test_examples.TestExamples" file="tests/integration/test_examples.py" line="22" name="test_workbench" time="0.787821769714"><failure message="TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}">self = &lt;tests.integration.test_examples.TestExamples object at 0x109ef5890&gt;, app = &lt;tests.conftest.App instance at 0x109d195f0&gt;

    def test_workbench(self, app):
        from examples.workbench import example
&gt;       example(app.session_file_output)

tests/integration/test_examples.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
examples/workbench.py:23: in example
    assets = [a for page in assets_iter for a in page]
tenable_io/helpers/workbench.py:84: in assets_parse
    &apos;value&apos;: &apos;All&apos;,
tenable_io/api/workbenches.py:167: in export_request
    params={k: params[k] for k in params if params[k] is not None})
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;tenable_io.client.TenableIOClient object at 0x109ef5f10&gt;, &apos;workbenches/export&apos;)
kwargs = {&apos;params&apos;: {&apos;chapter&apos;: &apos;vuln_by_asset&apos;, &apos;date_range&apos;: 7, &apos;filter&apos;: [{&apos;filter&apos;: &apos;severity&apos;, &apos;quality&apos;: &apos;qt&apos;, &apos;value&apos;: &apos;All&apos;}], &apos;format&apos;: &apos;nessus&apos;, ...}}
response = &lt;Response [401]&gt;

    def wrapper(*args, **kwargs):
        response = f(*args, **kwargs)
        if not 200 &lt;= response.status_code &lt;= 299:
&gt;           raise TenableIOApiException(response)
E           TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}

tenable_io/client.py:140: TenableIOApiException</failure><system-out>
TestExamples:test_workbench is running.

TestExamples:test_workbench took (0.815353155136 seconds).
</system-out><system-err>ERROR:tenable_io:{&quot;url&quot;: &quot;/workbenches/export?chapter=vuln_by_asset&amp;filter.0.quality=qt&amp;filter.0.value=All&amp;format=nessus&amp;filter.0.filter=severity&amp;date_range=7&amp;report=vulnerabilities&quot;, &quot;status_code&quot;: 401, &quot;reason&quot;: &quot;Unauthorized&quot;, &quot;method&quot;: &quot;GET&quot;, &quot;response_headers&quot;: {&quot;X-Request-Uuid&quot;: &quot;287d68d2011808ca94e3200050e6dde1&quot;, &quot;X-Gateway-Site-ID&quot;: &quot;nginx-router-b-prod-eu-central-1&quot;}}
</system-err></testcase><testcase classname="tests.integration.test_impersonation.TestImpersonation" file="tests/integration/test_impersonation.py" line="24" name="test_impersonation" time="0.00122904777527"><error message="test setup failure">self = &lt;tests.integration.test_impersonation.TestImpersonation object at 0x109d5ca10&gt;, app = &lt;tests.conftest.App instance at 0x109d195f0&gt;
client = &lt;tenable_io.client.TenableIOClient object at 0x109e9a9d0&gt;

    @pytest.fixture(scope=&apos;class&apos;)
    def user(self, app, client):
        user_id = client.users_api.create(UserCreateRequest(
&gt;           username=app.session_name(u&apos;test_impersonation%%s@%s&apos; % TenableIOTestConfig.get(&apos;users_domain_name&apos;)),
            name=&apos;test_impersonation&apos;,
            password=&apos;Sdk!Test1&apos;,
            permissions=&apos;16&apos;,
            type=&apos;local&apos;,
            email=app.session_name(u&apos;test_user_email+%%s@%s&apos; % TenableIOTestConfig.get(&apos;users_domain_name&apos;))
        ))

tests/integration/test_impersonation.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/config.py:25: in get
    return config.get(&apos;tenable_io-test&apos;, key)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;ConfigParser.SafeConfigParser instance at 0x1092723b0&gt;, section = &apos;tenable_io-test&apos;, option = &apos;users_domain_name&apos;, raw = False, vars = None

    def get(self, section, option, raw=False, vars=None):
        &quot;&quot;&quot;Get an option value for a given section.
    
            If `vars&apos; is provided, it must be a dictionary. The option is looked up
            in `vars&apos; (if provided), `section&apos;, and in `defaults&apos; in that order.
    
            All % interpolations are expanded in the return values, unless the
            optional argument `raw&apos; is true. Values for interpolation keys are
            looked up in the same manner as the option.
    
            The section DEFAULT is special.
            &quot;&quot;&quot;
        sectiondict = {}
        try:
            sectiondict = self._sections[section]
        except KeyError:
            if section != DEFAULTSECT:
                raise NoSectionError(section)
        # Update with the entry specific variables
        vardict = {}
        if vars:
            for key, value in vars.items():
                vardict[self.optionxform(key)] = value
        d = _Chainmap(vardict, sectiondict, self._defaults)
        option = self.optionxform(option)
        try:
            value = d[option]
        except KeyError:
&gt;           raise NoOptionError(option, section)
E           NoOptionError: No option &apos;users_domain_name&apos; in section: &apos;tenable_io-test&apos;

/usr/local/Cellar/python/2.7.13/Frameworks/Python.framework/Versions/2.7/lib/python2.7/ConfigParser.py:618: NoOptionError</error><system-out>
TestImpersonation:test_impersonation is running.

TestImpersonation:test_impersonation took (0.0209310054779 seconds).
</system-out></testcase><testcase classname="tests.integration.api.test_agent_config.TestAgentConfigApi" file="tests/integration/api/test_agent_config.py" line="10" name="test_details_edit" time="0.803114891052"><failure message="TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}">self = &lt;tests.integration.api.test_agent_config.TestAgentConfigApi object at 0x109f03d10&gt;, client = &lt;tenable_io.client.TenableIOClient object at 0x109e9a9d0&gt;

    def test_details_edit(self, client):
        # Get agent config details.
&gt;       previous_config = client.agent_config_api.details()

tests/integration/api/test_agent_config.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tenable_io/api/agent_config.py:31: in details
    &apos;scanner_id&apos;: scanner_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;tenable_io.client.TenableIOClient object at 0x109e9a9d0&gt;, &apos;scanners/%(scanner_id)s/agents/config&apos;), kwargs = {&apos;path_params&apos;: {&apos;scanner_id&apos;: 1}}
response = &lt;Response [401]&gt;

    def wrapper(*args, **kwargs):
        response = f(*args, **kwargs)
        if not 200 &lt;= response.status_code &lt;= 299:
&gt;           raise TenableIOApiException(response)
E           TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}

tenable_io/client.py:140: TenableIOApiException</failure><system-out>
TestAgentConfigApi:test_details_edit is running.

TestAgentConfigApi:test_details_edit took (0.81320309639 seconds).
</system-out><system-err>ERROR:tenable_io:{&quot;url&quot;: &quot;/scanners/1/agents/config&quot;, &quot;status_code&quot;: 401, &quot;reason&quot;: &quot;Unauthorized&quot;, &quot;method&quot;: &quot;GET&quot;, &quot;response_headers&quot;: {&quot;X-Request-Uuid&quot;: &quot;1c2d6f7e6e56472221cf46e823504afd&quot;, &quot;X-Gateway-Site-ID&quot;: &quot;nginx-router-b-prod-eu-central-1&quot;}}
</system-err></testcase><testcase classname="tests.integration.api.test_agent_exclusions.TestAgentExclusionsApi" file="tests/integration/api/test_agent_exclusions.py" line="52" name="test_create_list_delete" time="0.94512295723"><failure message="TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}">self = &lt;tests.integration.api.test_agent_exclusions.TestAgentExclusionsApi object at 0x109f72850&gt;, app = &lt;tests.conftest.App instance at 0x109d195f0&gt;
client = &lt;tenable_io.client.TenableIOClient object at 0x109e9a9d0&gt;

    def test_create_list_delete(self, app, client):
        new_exclusion = client.agent_exclusions_api.create(
            AgentExclusionCreateRequest(
                app.session_name(&apos;test_agent_exclusions_list&apos;),
&gt;               u&apos;fake.tenable.com&apos;
            )
        )

tests/integration/api/test_agent_exclusions.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tenable_io/api/agent_exclusions.py:17: in create
    &apos;scanner_id&apos;: scanner_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (&lt;tenable_io.client.TenableIOClient object at 0x109e9a9d0&gt;, &apos;scanners/%(scanner_id)s/agents/exclusions&apos;, &lt;tenable_io.api.agent_exclusions.AgentExclusionCreateRequest object at 0x109f72910&gt;)
kwargs = {&apos;path_params&apos;: {&apos;scanner_id&apos;: 1}}, response = &lt;Response [401]&gt;

    def wrapper(*args, **kwargs):
        response = f(*args, **kwargs)
        if not 200 &lt;= response.status_code &lt;= 299:
&gt;           raise TenableIOApiException(response)
E           TenableIOApiException: {&quot;statusCode&quot;:401,&quot;error&quot;:&quot;Unauthorized&quot;,&quot;message&quot;:&quot;Invalid credentials.&quot;}

tenable_io/client.py:140: TenableIOApiException</failure><system-out>
TestAgentExclusionsApi:test_create_list_delete is running.

TestAgentExclusionsApi:test_create_list_delete took (0.958436965942 seconds).
</system-out><system-err>ERROR:tenable_io:{&quot;url&quot;: &quot;/scanners/1/agents/exclusions&quot;, &quot;status_code&quot;: 401, &quot;reason&quot;: &quot;Unauthorized&quot;, &quot;method&quot;: &quot;POST&quot;, &quot;response_headers&quot;: {&quot;X-Request-Uuid&quot;: &quot;d2454c5e7d259e7a6924c6e6f6ab00f9&quot;, &quot;X-Gateway-Site-ID&quot;: &quot;nginx-router-b-prod-eu-central-1&quot;}}
</system-err></testcase></testsuite>